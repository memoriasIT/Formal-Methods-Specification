---   ____        _                   
---  |  _ \      | |                  
---  | |_) | __ _| | _____ _ __ _   _ 
---  |  _ < / _` | |/ / _ \ '__| | | |
---  | |_) | (_| |   <  __/ |  | |_| |
---  |____/ \__,_|_|\_\___|_|   \__, |
---     Lorenzo V.S.   &&        __/ |
---        María G.M.           |___/ 


load bakery.maude 
--- Extensión del módulo BAKERY:
--- El dispensador podrá pasar el turno (incrementar su next) si no hay ningún proceso 
--- con dicho número de orden.
mod BAKERY+ is 
    extending BAKERY . 
    including CONFIGURATION .

    ---   / _ \ _ __ ___  O
    ---  | (_) | '_ (_-<  P
    ---   \___/| .__/__/  S
    ---        |_|        ~  

    var  Did      : DispenserId .
    var  Pid      : ProcessId .
    var  Proc     : BProcess . 
    vars X Y Z T  : Nat .
    var  mode     : Mode .
    var  C        : Configuration . 

    --- Devuelve true si hay un proceso inmediatamente siguiente 
    op noProcessWithNumber : Nat Configuration -> Bool .
    eq  noProcessWithNumber (X, none) = true .
    eq noProcessWithNumber (X, < Did : Dispenser | next: X, last: Y >) = true . 
    ceq noProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z >) = false if X == Z .
    ceq noProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z >) = true if X =/= Z .
    ceq  noProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z > C) = 
        noProcessWithNumber(X, < Pid : BProcess | mode: mode, number: Z >) and noProcessWithNumber(X, C) if C =/= none . 

    --- Devuelve el número de procesos en espera
    op waitingCountPlus : Configuration -> Nat .
    eq waitingCountPlus (none) = 0 .
    eq waitingCountPlus (< Did : Dispenser | next: X, last: Y >) = 0 .  
    eq waitingCountPlus (< Pid : BProcess | mode: wait, number: X > C)  = 1 + waitingCountPlus (C) . 
    ceq waitingCountPlus (< Pid : BProcess | mode: mode, number: X > C ) = waitingCountPlus (C) if mode == sleep or mode == crit . 

    --- R  @ RULES @  _  @ RULES @ R      
    --- U  _ _  _  _ | | ___  ___  U
    --- L | '_|| || || |/ -_)(_-<  L
    --- E |_|   \_,_||_|\___|/__/  E
    --- S  @ RULES @    @ RULES @  S    

    --- Un proceso puede abandonar la cola en cualquier momento
    rl [leave] : < Pid : BProcess | mode: wait, number: Z >  =>  < Pid : BProcess | mode: sleep, number: 0 > . 

    --- El dispensador (dispatcher) puede pasar al siguiente número si no existe un proceso siguiente
    crl [next] : [[ < Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: mode, number: Z > C ]]
      => [[ < Did : Dispenser | next: s X, last: Y > < Pid : BProcess | mode: mode, number: Z > C ]]
        if (noProcessWithNumber(X, < Pid : BProcess | mode: mode, number: Z > C) == true 
        and (waitingCountPlus(< Pid : BProcess | mode: mode, number: Z > C) > 0)) .
endm  

---  ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ _________ ____ 
--- ||A |||b |||s |||t |||r |||a |||c |||c |||i |||ó |||n |||       |||+ ||
--- ||__|||__|||__|||__|||__|||__|||__|||__|||__|||__|||__|||_______|||__||
--- |/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|

mod ABSTRACT-BAKERY+ is 
    including BAKERY+ .

    var  Did                    : DispenserId .
    vars N L PN T               : Nat .
    vars Pid1  Pid2  Pid        : ProcessId .
    var  Proc                   : BProcess . 
    vars mode mode1 mode2 m     : Mode .
    var  C                      : Configuration . 
    vars X Y Z                  : Nat .

    --- Devuelve true si hay un proceso con dicho numero en el conjunto de procesos. 
    op  ProcessWithNumber : Nat Configuration -> Bool .
    eq  ProcessWithNumber (X, none) = false .
    eq  ProcessWithNumber (X, < Did : Dispenser | next: Z, last: Y > C)     = false or ProcessWithNumber(X, C) .  
    ceq ProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z > C) = true  or ProcessWithNumber(X, C) if X == Z .
    ceq ProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z > C) = false or ProcessWithNumber(X, C) if X =/= Z .

    --- Devuelve el mínimo número distinto de cero para una configuración
    op  minNumberNotZero : Nat Configuration -> Nat .
    eq  minNumberNotZero (X, none) = X .
    eq minNumberNotZero (X, < Did : Dispenser | next: Z, last: Y >) = X .
    ceq minNumberNotZero (X, < Pid : BProcess | mode: m, number: Z > C ) = minNumberNotZero(min(X, Z), C) if (Z > 0 and X =/= 0) .
    ceq minNumberNotZero (X, < Pid : BProcess | mode: m, number: Z > C ) = minNumberNotZero(Z, C) if (Z > 0 and X == 0) .
    ceq minNumberNotZero (X, < Pid : BProcess | mode: m, number: Z > C ) = minNumberNotZero(X, C) if (Z == 0) .

    --- Operación predecesor para números mayores que 1
    op predMin1 : Nat -> Nat .
    eq predMin1 (0)     = 1 .
    eq predMin1 (1)     = 1 .
    eq predMin1 (s s X) = s X . 

    --- ABS DISP 1.
    --- Abstracción: Dispensador.last-- if (no hay procesos menores que dicho numero esperando) .
    --- EJ: D_1,4 P1_2 P2_3 -> D_1,3 P1_1 P2_2
     ceq [AbsDispLastPred] : ([[< Did : Dispenser | next: X, last: Y > C]]) = [[< Did : Dispenser | next: X, last: predMin1(Y) > C]]
         if ((ProcessWithNumber(predMin1(Y), C) == false) and (Y > 1)) .

    --- ABS DISP NEXT 
    --- Ecuacion que decrementa el next del dispensador y cuando el valor del next del dispensador es mayor que el proceso waiting con num mas alto.    
    --- EJ: D
     ceq [AbsDispNextPred] : ([[< Did : Dispenser | next: X, last: Y > C]]) = [[< Did : Dispenser | next: predMin1(X), last: Y > C]]
        if ((X > minNumberNotZero(X,C)) and (X > 1)) .

    --- ABS PROC 1.
    --- Ecuacion que decrementa el numero de un proceso cuando no hay procesos anteriores esperando, manteniendo el orden relativo.
    --- EJ: Disp P1_2 P2_3 -> Disp P1_1 P2_2
    ceq [AbsProcPred] : ([[< Pid : BProcess | mode: wait, number: Z > C]]) = [[ < Pid : BProcess | mode: wait, number: predMin1(Z) > C]]
        if ((ProcessWithNumber(predMin1(Z), C) == false) and (Z > 1)) .

endm

eof
