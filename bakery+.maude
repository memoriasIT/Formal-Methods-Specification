---   ____        _                   
---  |  _ \      | |                  
---  | |_) | __ _| | _____ _ __ _   _ 
---  |  _ < / _` | |/ / _ \ '__| | | |
---  | |_) | (_| |   <  __/ |  | |_| |
---  |____/ \__,_|_|\_\___|_|   \__, |
---     Lorenzo V.S.   &&        __/ |
---        María G.M.           |___/ 


load bakery.maude 
--- Extensión del módulo BAKERY:
--- El dispensador podrá pasar el turno (incrementar su next) si no hay ningún proceso 
--- con dicho número de orden.
mod BAKERY+ is 
    extending BAKERY . 
    including CONFIGURATION .

    ---   / _ \ _ __ ___  O
    ---  | (_) | '_ (_-<  P
    ---   \___/| .__/__/  S
    ---        |_|        ~  

    var  Did      : DispenserId .
    var  Pid      : ProcessId .
    var  Proc     : BProcess . 
    vars X Y Z T  : Nat .
    var  mode     : Mode .
    var  C        : Configuration . 

    --- Devuelve true si hay un proceso inmediatamente siguiente 
    op noProcessWithNumber : Nat Configuration -> Bool .
    eq  noProcessWithNumber (X, none) = true .
    ceq noProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z >) = false if X == Z .
    ceq noProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z >) = true if X =/= Z .
    eq  noProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z > C) = noProcessWithNumber(X, < Pid : BProcess | mode: mode, number: Z >) and noProcessWithNumber(X, C) . 

    --- Devuelve el número de procesos en sección crítica
    op critCountPlus : Configuration -> Nat .
    eq critCountPlus (none) = 0 .
    eq critCountPlus (< Did : Dispenser | next: X, last: Y >) = 0 .  
    eq critCountPlus (< Pid : BProcess | mode: crit, number: X > C)  = 1 + critCountPlus (C) . 
    ceq critCountPlus (< Pid : BProcess | mode: mode, number: X > C ) = critCountPlus (C) if mode == sleep or mode == wait . 
    
    --- Devuelve el número de procesos en espera
    op waitingCountPlus : Configuration -> Nat .
    eq waitingCountPlus (none) = 0 .
    eq waitingCountPlus (< Did : Dispenser | next: X, last: Y >) = 0 .  
    eq waitingCountPlus (< Pid : BProcess | mode: wait, number: X > C)  = 1 + waitingCountPlus (C) . 
    ceq waitingCountPlus (< Pid : BProcess | mode: mode, number: X > C ) = waitingCountPlus (C) if mode == sleep or mode == crit . 

    --- R  @ RULES @  _  @ RULES @ R      
    --- U  _ _  _  _ | | ___  ___  U
    --- L | '_|| || || |/ -_)(_-<  L
    --- E |_|   \_,_||_|\___|/__/  E
    --- S  @ RULES @    @ RULES @  S    

    --- Un proceso puede abandonar la cola en cualquier momento
    rl [leave] : < Pid : BProcess | mode: wait, number: Z >  =>  < Pid : BProcess | mode: sleep, number: 0 > . 

    --- El dispensador (dispatcher) puede pasar al siguiente número si no existe un proceso siguiente
    crl [next] : [[ < Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: mode, number: Z > C ]]
      => [[ < Did : Dispenser | next: s X, last: Y > < Pid : BProcess | mode: mode, number: Z > C ]]
        if (noProcessWithNumber(X, < Pid : BProcess | mode: mode, number: Z > C) == true 
        and (waitingCountPlus(< Pid : BProcess | mode: mode, number: Z > C) > 0)) .
        --- and (critCountPlus(< Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: wait, number: Z > C) == 0)) .

endm  

--- [[< D 0 : Dispenser | next: 1,last: 1 > 
--- < P 1 : BProcess | mode: sleep,number: 1 > 
--- < P 2 : BProcess | mode: sleep,number: 2 > 
--- < P 3 : BProcess | mode: sleep,number: 3 > 
--- < P 4 : BProcess | mode: sleep,number: 4 > 
--- < P 5 : BProcess | mode: wait,number: 5 >]]

--- [[< D 0 : Dispenser | next: 4,last: 6 > < P 1 : BProcess | mode: sleep,number: 0 > < P 2 : BProcess | mode: sleep,number: 0 > < P 3 : BProcess | mode: sleep,number: 0 > < P 4 : BProcess | mode: sleep,number: 0 > < P 5 : BProcess | mode: wait,number: 5 >]]
--- [[< D 0 : Dispenser | next: 5,last: 6 > < P 1 : BProcess | mode: sleep,number: 0 > < P 2 : BProcess | mode: sleep,number: 0 > < P 3 : BProcess | mode: sleep,number: 0 > < P 4 : BProcess | mode: sleep,number: 0 > < P 5 : BProcess | mode: crit,number: 5 >]]

--- search in BAKERY+ : [[< D 0 : Dispenser | next: 4,last: 6 > < P 1 : BProcess | mode: sleep,number: 0 > < P 2 : BProcess | mode: sleep,number: 0 > < P 3 : BProcess | mode: sleep,number: 0 > < P 4 : BProcess | mode: sleep,number: 0 > < P 5 : BProcess | mode: wait,number: 5 >]] =>* [[< D 0 : Dispenser | next: 5,last: 6 > < P 1 : BProcess | mode: sleep,number: 0 > < P 2 : BProcess | mode: sleep,number: 0 > < P 3 : BProcess | mode: sleep,number: 0 > < P 4 : BProcess | mode: sleep,number: 0 > < P 5 : BProcess | mode: crit,number: 5 >]] .


--- [[< D 0 : Dispenser | next: 6,last: 6 > < P 1 : BProcess | mode: sleep,number: 0 > < P 2 : BProcess | mode: sleep,number: 0 > < P 3 : BProcess | mode: sleep,number: 0 > < P 4 : BProcess | mode: sleep,number: 0 > < P 5 : BProcess | mode: wait,number: 0 >]]


---  ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ _________ ____ 
--- ||A |||b |||s |||t |||r |||a |||c |||c |||i |||ó |||n |||       |||+ ||
--- ||__|||__|||__|||__|||__|||__|||__|||__|||__|||__|||__|||_______|||__||
--- |/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|

mod ABSTRACT-BAKERY+ is 
    including BAKERY+ .

    var  Did                    : DispenserId .
    vars N L PN T               : Nat .
    vars Pid1  Pid2  Pid        : ProcessId .
    var  Proc                   : BProcess . 
    vars mode mode1 mode2 m     : Mode .
    var  C                      : Configuration . 
    vars X Y Z                  : Nat .


    --- Devuelve true si hay un proceso con numero
    op ProcessWithNumber : Nat Configuration -> Bool .
    eq  ProcessWithNumber (X, none) = false .
    eq  ProcessWithNumber (X, < Did : Dispenser | next: Z, last: Y >) = false .  
    ceq ProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z >) = true if X == Z .
    ceq ProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z >) = false if X =/= Z .
    eq  ProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z > C) = ProcessWithNumber(X, < Pid : BProcess | mode: mode, number: Z >) or ProcessWithNumber(X, C) . 

    ceq [decProc] : < Pid : BProcess | mode: mode, number: X > C
        = < Pid : BProcess | mode: mode, number: sd(X, 1) > C
        if ProcessWithNumber(sd(X,1), C) = false and X > 1 .

    --- ceq [decDispLast] : < Did : Dispenser | next: X, last: Y > C
    ---     = < Did : Dispenser | next: X, last: sd(Y,1) > C
    ---     if ProcessWithNumber(sd(Y,1), C) = false and Y > 1 . 

    --- ceq [decDispNext] : < Did : Dispenser | next: X, last: Y > C
    ---     = < Did : Dispenser | next: sd(X,1), last: Y > C
    ---     if ProcessWithNumber(X, C) = true and X > 1 .

--- red ProcessWithNumber(2, < P 1 : BProcess | mode: wait,number: 1 > < P 2 : BProcess | mode: wait,number: 2 >) .
--- red ProcessWithNumber(0, < P 1 : BProcess | mode: wait,number: 1 > < P 2 : BProcess | mode: wait,number: 2 >) .
endm

eof

---  ____  ____  _  _   __  
--- (    \(  __)( \/ ) /  \ 
---  ) D ( ) _) / \/ \(  O )
--- (____/(____)\_)(_/ \__/ 

---                ____________________
--- --\__/--\__/--[      BProcess      ]--\__/--\__/--

--- Creación de un proceso con ID 32
---     modo: sleep
---     numero en cola: 1
--- rew < P 32 : BProcess | mode: sleep, number: 1 > . 

---                ____________________
--- --\__/--\__/--[      Dispenser     ]--\__/--\__/--

--- rew < D : Dispenser | next: 1, last: 1 > . 



---                ____________________
--- --\__/--\__/--[       Search      ]--\__/--\__/--
--- search initial(1) =>* [[< D 1 : Dispenser | next: 1, last: 1 > < P 1 : BProcess | mode: crit, number: 1 > ]] .
