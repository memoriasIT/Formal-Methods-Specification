---   ____        _                   
---  |  _ \      | |                  
---  | |_) | __ _| | _____ _ __ _   _ 
---  |  _ < / _` | |/ / _ \ '__| | | |
---  | |_) | (_| |   <  __/ |  | |_| |
---  |____/ \__,_|_|\_\___|_|   \__, |
---     Lorenzo V.S.   &&        __/ |
---        María G.M.           |___/ 
mod BAKERY is
    protecting NAT .
    including CONFIGURATION .

    --- Colección de objetos que modelan el sistema
    sort GBState .
    op [[_]] : Configuration -> GBState .

    --- Un proceso puede estar en tres posibles estados:
    --- sleep, wait o crit
    sort Mode .
    ops sleep wait crit : -> Mode .

    ---    ___ _  ~~ @ Classes @ ~~  C                
    ---   / __| |__ _ ______ ___ ___ L
    ---  | (__| / _` (_-<_-</ -_|_-< A
    ---   \___|_\__,_/__/__/\___/__/ S
    ---           ~~ @ Classes @ ~~  S

    --- Clase BProcess modela el comportamiento de un proceso
    --- class BProcess | mode: Mode, number: Nat .
    --- Atributos:
    ---     * mode:     estado del proceso (sleep, wait, crit)
    ---     * number:   PID del proceso, su identificador
    sort BProcess .
    subsort BProcess < Cid .
    op BProcess : -> BProcess .

    op mode:_   : Mode  -> Attribute [gather (&)] .
    op number:_ : Nat   -> Attribute [gather (&)] .

    --- Clase Dispenser que modela el comportamiento de un dispatcher
    --- class Dispenser | next: Nat, last: Nat .
    --- Argumentos:
    ---     * next: Id del próximo proceso a atender
    ---     * last: Id del último proceso atendido
    sort Dispenser .
    subsort Dispenser < Cid .
    op Dispenser : -> Dispenser .

    op next:_    : Nat -> Attribute [gather (&)] .
    op last:_    : Nat -> Attribute [gather (&)] .


    ---    ___            ~
    ---   / _ \ _ __ ___  O
    ---  | (_) | '_ (_-<  P
    ---   \___/| .__/__/  S
    ---        |_|        ~      

    --- Operación para crear Dispensadores
    sort DispenserId .
    subsort DispenserId < Oid .
    op D_ : Nat -> DispenserId .

    --- Operación para crear PIDs (Identificadores de procesos)
    sort ProcessId .
    subsort ProcessId < Oid .
    op P_ : Nat -> ProcessId .

    --- VARIABLES 
    var  D        : Dispenser .
    var  Did      : DispenserId .
    var  Pid      : ProcessId .
    vars X Y Z    : Nat .
    var Atts      : AttributeSet .
    var C         : Configuration . 
    var m         : Mode .
    --- Operación para crear sistemas con un número cualquiera de procesos
    ---     Default: Dispenser.next = Dispenser.last = 1
    op initialAux : Nat -> Configuration .
    eq initialAux (0) = < D 0 : Dispenser | next: 1, last: 1 >  .
    eq initialAux (s X) = (< P  (s X) : BProcess | mode: sleep, number: (s X) >) (initialAux(X)) .

    op initial : Nat -> GBState .
    eq initial (X) = [[ initialAux(X) ]] .

    --- 
    op critCount : GBState -> Nat .
    eq critCount ([[< Did : Dispenser | next: X, last: Y >]]) = 0 . 
    eq critCount ([[ (< Pid : BProcess | mode: crit, number: X >) ]]) = 1 . 
    eq critCount ([[ (< Pid : BProcess | mode: m, number: X >) ]]) = 0 . 
    eq critCount ([[ (< Pid : BProcess | mode: crit, number: X >) C ]]) = 1 + critCount ([[C]]) . 
    eq critCount ([[ (< Pid : BProcess | mode: m, number: X >) C ]]) = critCount ([[C]]) . 

    --- R  @ RULES @  _  @ RULES @ R      
    --- U  _ _  _  _ | | ___  ___  U
    --- L | '_|| || || |/ -_)(_-<  L
    --- E |_|   \_,_||_|\___|/__/  E
    --- S  @ RULES @    @ RULES @  S    

    --- BProcess: sleep -> wait
    ---     Se toma el número de orden disponible (last) en el dispatcher (Dispenser)
    ---     Dispenser.last++
    rl [wake-up] : < Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: sleep, number:  s Z > 
    =>  < Did : Dispenser | next: X, last: s Y > < Pid : BProcess | mode: wait, number: Y >  .

    --- BProcess.Id == Dispenser.next
    ---     BProcess: wait -> crit
    rl [crit] : < Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: wait, number: X >  
    => < Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: crit, number: X >  .

    --- BProcess: crit -> sleep
    ---     BProcess.number = 0
    ---     Dispenser.next++
    rl [sleep] : < Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: crit, number: Z > 
    =>  < Did : Dispenser | next: s X, last: Y > < Pid : BProcess | mode: sleep, number: 0 > .

endm

mod ABSTRACT-BAKERY is 
    including BAKERY .

    var  Did      : DispenserId .
    var  Pid      : ProcessId .
    vars X Y N Z  : Nat .
    var C         : Configuration . 
    var m         : Mode .

    op restaAux : Nat Configuration -> Configuration .
    eq restaAux(N, none) = none .
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: Z >) C) =  < Pid : BProcess | mode: m, number: Z > restaAux(N, C)
        if m == sleep .
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: Z >)) =  < Pid : BProcess | mode: m, number: Z > 
        if m == sleep .    
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: Z >)) =  < Pid : BProcess | mode: m, number: sd(Z,N) > 
        if m =/= sleep .
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: Z > C)) =  < Pid : BProcess | mode: m, number: sd(Z,N) > restaAux(N, C) 
        if m =/= sleep .


    op noDispensers : Configuration -> Bool .
    eq noDispensers (< Pid : BProcess | mode: m, number: Z >) = true . 
    eq noDispensers (< Did : Dispenser | next: X, last: Y > C) = false .
    eq noDispensers (< Pid : BProcess | mode: m, number: Z > C) = true and noDispensers (C) . 


    --- rl [simplify] : [[< Did : Dispenser | next: s s X, last: Y > < Pid : BProcess | mode: m, number: Z > C]]
    --- =>    [[abstract( < Did : Dispenser | next: s s X, last: Y > < Pid : BProcess | mode: m, number: Z > C)]] .

    eq [[< Did : Dispenser | next: s s X, last: Y > < Pid : BProcess | mode: m, number: Z > C]]
        = [[abstract( < Did : Dispenser | next: s s X, last: Y > < Pid : BProcess | mode: m, number: Z > C)]] .
    
    --- Abstracción: decrementando en uno los números de orden de todos los procesos (los que no
    --- estén en modo sleep, que tendrán número de orden 0), siempre que el valor de next sea mayor que 1
    op abstract : Configuration -> Configuration . 
    eq abstract (< Did : Dispenser | next: 1, last: Y > C) = (< Did : Dispenser | next: 1, last: Y > C) .
    ceq abstract(< Did : Dispenser | next: X, last: Y > C)
        = < Did : Dispenser | next: sd(X,1), last: sd(Y, 1) > restaAux(1 , C)
        if X > 1 and noDispensers(C) .



    --- ceq [[(< Did : Dispenser | next: X, last: Y > C)]] 
        --- = [[< Did : Dispenser | next: sd(X,Y), last: sd(X,Y) > restaAux(Y , C)]] 
        --- if X > 1 and noDispensers(C) .

    --- search initial(5) =>* [[ < (Pid : BProcess | mode: (m:Mode), number: (N:Nat) > < Did : Dispenser | next: (N:Nat), last: (N:Nat) > C:Configuration)]] . 
    --- search ( < P 1 : BProcess | mode: wait, number: 3 > < Did : Dispenser | next: 3, last: 2 > ) =>* C:Configuration . 


endm

--- load model-checker.maude
--- mod BAKERY-PREDS is
---     protecting ABSTRACT-BAKERY .
---     including SATISFACTION .
    
---     subsort GBState < State .

---     var GB : GBState .

---     op mutex : -> Prop .
---     op process : Mode Nat -> Prop .
---     ceq GB |= mutex = true if critCount(GB) <= 1 .
    
---   ---  ceq Dispensador(n, s s l) proceso(mode, number) Conjunto |= process(mode, number) = true if s s l > number .

---   ---  l >= s s number

    
---     --- op phil-status : Nat/{P} Status -> Prop .
---     --- op phil-sticks : Nat/{P} Nat -> Prop .

---     --- vars N I : Nat .
---     --- var S : Status .
---     --- var C : Configuration .
---     --- eq philosopher([I], S, N) C |= phil-status([I], S) = true .
---     --- eq philosopher([I], S, N) C |= phil-sticks([I], N) = true .
--- --- red modelCheck(initial(5), [] ~(P1(, 1) /\ phil-sticks([1], 1) /\ phil-sticks([2], 1) /\ phil-sticks([3], 1) /\ 
--- --- phil-sticks([4], 1))) .
--- --- red modelCheck(initial(5), [] ~(D 0 (n, s s l) /\ P 1(m1, l1) /\ P 2(m2, l2) /\ P 3(m3, l3) /\ P 4(m4, l4) /\ 
--- --- P 5(m5, l5))) .

--- --- if l1 or l2 or l3 < s s l

--- endm 

--- mod BAKERY-CHECK is
---     protecting BAKERY-PREDS .
---     including MODEL-CHECKER .
---     including LTL-SIMPLIFIER .
--- endm

eof

---  ____  ____  _  _   __  
--- (    \(  __)( \/ ) /  \ 
---  ) D ( ) _) / \/ \(  O )
--- (____/(____)\_)(_/ \__/ 

---                ____________________
--- --\__/--\__/--[      BProcess      ]--\__/--\__/--

--- Creación de un proceso con ID 32
---     modo: sleep
---     numero en cola: 1
--- rew < P 32 : BProcess | mode: sleep, number: 1 > . 

---                ____________________
--- --\__/--\__/--[      Dispenser     ]--\__/--\__/--

--- rew < D : Dispenser | next: 1, last: 1 > . 



---                ____________________
--- --\__/--\__/--[       Search      ]--\__/--\__/--
--- search initial(1) =>* [[< D 1 : Dispenser | next: 1, last: 1 > < P 1 : BProcess | mode: crit, number: 1 > ]] .
