---   ____        _                   
---  |  _ \      | |                  
---  | |_) | __ _| | _____ _ __ _   _ 
---  |  _ < / _` | |/ / _ \ '__| | | |
---  | |_) | (_| |   <  __/ |  | |_| |
---  |____/ \__,_|_|\_\___|_|   \__, |
---     Lorenzo V.S.   &&        __/ |
---        María G.M.           |___/ 

load model-checker.maude

mod BAKERY is
    protecting NAT .
    including CONFIGURATION .

    --- Colección de objetos que modelan el sistema
    sort GBState .
    op [[_]] : Configuration -> GBState .

    --- Un proceso puede estar en tres posibles estados:
    --- sleep, wait o crit
    sort Mode .
    ops sleep wait crit : -> Mode .

    ---    ___ _  ~~ @ Classes @ ~~  C                
    ---   / __| |__ _ ______ ___ ___ L
    ---  | (__| / _` (_-<_-</ -_|_-< A
    ---   \___|_\__,_/__/__/\___/__/ S
    ---           ~~ @ Classes @ ~~  S

    --- Clase BProcess modela el comportamiento de un proceso
    --- class BProcess | mode: Mode, number: Nat .
    --- Atributos:
    ---     * mode:     estado del proceso (sleep, wait, crit)
    ---     * number:   PID del proceso, su identificador
    sort BProcess .
    subsort BProcess < Cid .
    op BProcess : -> BProcess .

    op mode:_   : Mode  -> Attribute [gather (&)] .
    op number:_ : Nat   -> Attribute [gather (&)] .

    --- Clase Dispenser que modela el comportamiento de un dispatcher
    --- class Dispenser | next: Nat, last: Nat .
    --- Argumentos:
    ---     * next: Id del próximo proceso a atender
    ---     * last: Id del último proceso atendido
    sort Dispenser .
    subsort Dispenser < Cid .
    op Dispenser : -> Dispenser .

    op next:_    : Nat -> Attribute [gather (&)] .
    op last:_    : Nat -> Attribute [gather (&)] .


    ---    ___            ~
    ---   / _ \ _ __ ___  O
    ---  | (_) | '_ (_-<  P
    ---   \___/| .__/__/  S
    ---        |_|        ~      

    --- Operación para crear Dispensadores
    sort DispenserId .
    subsort DispenserId < Oid .
    op D_ : Nat -> DispenserId .

    --- Operación para crear PIDs (Identificadores de procesos)
    sort ProcessId .
    subsort ProcessId < Oid .
    op P_ : Nat -> ProcessId .

    --- VARIABLES 
    var  D        : Dispenser .
    var  Did      : DispenserId .
    var  Pid      : ProcessId .
    vars X Y Z    : Nat .
    var Atts      : AttributeSet .
    var C         : Configuration . 
    var m         : Mode .

    --- Operación para crear sistemas con un número cualquiera de procesos
    ---     Default: Dispenser.next = Dispenser.last = 1
    op initialAux : Nat -> Configuration .
    eq initialAux (0) = < D 0 : Dispenser | next: 1, last: 1 >  .
    eq initialAux (s X) = (< P  (s X) : BProcess | mode: sleep, number: 0 >) (initialAux(X)) .

    op initial : Nat -> GBState .
    eq initial (X) = [[ initialAux(X) ]] .

    --- 
    op critCount : GBState -> Nat .
    eq critCount ([[< Did : Dispenser | next: X, last: Y >]]) = 0 . 
    eq critCount ([[ (< Pid : BProcess | mode: crit, number: X >) ]]) = 1 . 
    ceq critCount ([[ (< Pid : BProcess | mode: m, number: X >) ]]) = 0 if m == sleep or m  == wait . 
    eq critCount ([[ (< Pid : BProcess | mode: crit, number: X >) C ]]) = 1 + critCount ([[C]]) . 
    ceq critCount ([[ (< Pid : BProcess | mode: m, number: X >) C ]]) = critCount ([[C]])  if m == sleep or m  == wait . 

    --- R  @ RULES @  _  @ RULES @ R      
    --- U  _ _  _  _ | | ___  ___  U
    --- L | '_|| || || |/ -_)(_-<  L
    --- E |_|   \_,_||_|\___|/__/  E
    --- S  @ RULES @    @ RULES @  S    

    --- BProcess: sleep -> wait
    ---     Se toma el número de orden disponible (last) en el dispatcher (Dispenser)
    ---     Dispenser.last++
    rl [wake-up] : < Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: sleep, number: 0 > 
    =>  < Did : Dispenser | next: X, last: s Y > < Pid : BProcess | mode: wait, number: Y >  .

    --- BProcess.Id == Dispenser.next
    ---     BProcess: wait -> crit
    rl [crit] : < Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: wait, number: X >  
    => < Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: crit, number: X >  .

    --- BProcess: crit -> sleep
    ---     BProcess.number = 0
    ---     Dispenser.next++
    rl [sleep] : < Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: crit, number: Z > 
    =>  < Did : Dispenser | next: s X, last: Y > < Pid : BProcess | mode: sleep, number: 0 > .

endm

---  ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ 
--- ||A |||b |||s |||t |||r |||a |||c |||c |||i |||ó |||n ||
--- ||__|||__|||__|||__|||__|||__|||__|||__|||__|||__|||__||
--- |/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|

--- Abstracción del  módulo BAKERY:
--- Decrementando en uno los números de orden de todos los procesos (los que no
--- estén en modo sleep, que tendrán número de orden 0), siempre que el valor de 
--- next sea mayor que 1
mod ABSTRACT-BAKERY is 
    including BAKERY .

    ---    ___            ~
    ---   / _ \ _ __ ___  O
    ---  | (_) | '_ (_-<  P
    ---   \___/| .__/__/  S
    ---        |_|        ~      

    --- VARIABLES 
    var  C        : Configuration . 
    var  Did      : DispenserId .
    var  Pid      : ProcessId .
    vars X Y N Z  : Nat .
    var  m        : Mode .

    --- Operación auxiliar para decrementar en N los números de orden para los procesos (parámetro "number")
    --- Argumentos:
    ---     Cantidad a decrementar  : Nat
    ---     Lista de Procesos       : Configuration
    op restaAux : Nat Configuration -> Configuration .
    eq restaAux(N, none) = none .
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: Z >) C) =  < Pid : BProcess | mode: m, number: Z > restaAux(N, C)
        if m == sleep .
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: Z >)) =  < Pid : BProcess | mode: m, number: Z > 
        if m == sleep .    
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: Z >)) =  < Pid : BProcess | mode: m, number: sd(Z,N) > 
        if m =/= sleep .
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: Z > C)) =  < Pid : BProcess | mode: m, number: sd(Z,N) > restaAux(N, C) 
        if m =/= sleep .

    --- Operación auxiliar para comprobar que no hay dispensadores en una configuración determinada
    --- Argumentos: 
    ---     Lista de configuraciones    : Configuration 
    op noDispensers : Configuration -> Bool .
    eq noDispensers (< Pid : BProcess | mode: m, number: Z >) = true . 
    eq noDispensers (< Did : Dispenser | next: X, last: Y > C) = false .
    eq noDispensers (< Pid : BProcess | mode: m, number: Z > C) = true and noDispensers (C) . 

    --- Abstracción: decrementando en uno los números de orden de todos los procesos (los que no
    --- estén en modo sleep, que tendrán número de orden 0), siempre que el valor de next sea mayor que 1

    --- Ecuación que permite la abstracción
    eq [[< Did : Dispenser | next: s s X, last: Y > < Pid : BProcess | mode: m, number: Z > C]]
        = [[abstract( < Did : Dispenser | next: s s X, last: Y > < Pid : BProcess | mode: m, number: Z > C)]] .

    op abstract : Configuration -> Configuration . 
    eq abstract(none) = none .
    eq abstract (< Did : Dispenser | next: 1, last: Y > C) = (< Did : Dispenser | next: 1, last: Y > C) .
    ceq abstract(< Did : Dispenser | next: X, last: Y > C)
        = < Did : Dispenser | next: sd(X,1), last: sd(Y, 1) > restaAux(1 , C)
        if X > 1 and noDispensers(C) .

endm

--- Módulo auxiliar para usar el model checker de maude
mod BAKERY-PREDS is
    protecting ABSTRACT-BAKERY .
    including SATISFACTION .
    
    --- Colección de objetos que modelan el sistema
    subsort GBState < State .

    --- VARIABLES 
    var GB : GBState .
    var m : Mode .
    var Pid : ProcessId .
    var Z : Nat .
    
    --- Un proceso estará en mutex siempre que el número de procesos en la sección critca sea menor o igual a 1
    op mutex : -> Prop .
    ceq GB |= mutex = true if critCount(GB) <= 1 .
    
    --- Un proceso estará en dicho modo
    op processInMode : ProcessId Mode -> Prop . 
    eq [[< Pid : BProcess | mode: m, number: Z >]] |= processInMode(Pid, m) = true . 

endm 

--- Uso del model checker para simulación LTL
mod BAKERY-CHECK is
    protecting BAKERY-PREDS .
    including MODEL-CHECKER .
    including LTL-SIMPLIFIER .
endm

--- Extensión del módulo BAKERY:
--- El dispensador podrá pasar el turno (incrementar su next) si no hay ningún proceso 
--- con dicho número de orden.
mod BAKERY+ is 
    extending BAKERY . 
    including CONFIGURATION .

    ---   / _ \ _ __ ___  O
    ---  | (_) | '_ (_-<  P
    ---   \___/| .__/__/  S
    ---        |_|        ~  

    var  Did      : DispenserId .
    var  Pid      : ProcessId .
    var  Proc     : BProcess . 
    vars X Y Z T  : Nat .
    var  mode     : Mode .
    var  C        : Configuration . 

    --- Devuelve true si hay un proceso inmediatamente siguiente 
    op noProcessWithNumber : Nat Configuration -> Bool .
    eq  noProcessWithNumber (X, none) = true .
    ceq noProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z >) = false if X == Z .
    ceq noProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z >) = true if X =/= Z .
    eq  noProcessWithNumber (X, < Pid : BProcess | mode: mode, number: Z > C) = noProcessWithNumber(X, < Pid : BProcess | mode: mode, number: Z >) and noProcessWithNumber(X, C) . 

    --- Devuelve el número de procesos en sección crítica
    op critCountPlus : Configuration -> Nat .
    eq critCountPlus (none) = 0 .
    eq critCountPlus (< Did : Dispenser | next: X, last: Y >) = 0 .  
    eq critCountPlus (< Pid : BProcess | mode: crit, number: X > C)  = 1 + critCountPlus (C) . 
    ceq critCountPlus (< Pid : BProcess | mode: mode, number: X > C ) = critCountPlus (C) if mode == sleep or mode == wait . 
    
    --- Devuelve el número de procesos en espera
    op waitingCountPlus : Configuration -> Nat .
    eq waitingCountPlus (none) = 0 .
    eq waitingCountPlus (< Did : Dispenser | next: X, last: Y >) = 0 .  
    eq waitingCountPlus (< Pid : BProcess | mode: wait, number: X > C)  = 1 + waitingCountPlus (C) . 
    ceq waitingCountPlus (< Pid : BProcess | mode: mode, number: X > C ) = waitingCountPlus (C) if mode == sleep or mode == crit . 

    --- R  @ RULES @  _  @ RULES @ R      
    --- U  _ _  _  _ | | ___  ___  U
    --- L | '_|| || || |/ -_)(_-<  L
    --- E |_|   \_,_||_|\___|/__/  E
    --- S  @ RULES @    @ RULES @  S    

    --- Un proceso puede abandonar la cola en cualquier momento
    rl [leave] : < Pid : BProcess | mode: wait, number: Z >  =>  < Pid : BProcess | mode: sleep, number: 0 > . 

    --- El dispensador (dispatcher) puede pasar al siguiente número si no existe un proceso siguiente
    crl [next] : [[ < Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: mode, number: Z > C ]]
      => [[ < Did : Dispenser | next: s X, last: Y > < Pid : BProcess | mode: mode, number: Z > C ]]
        if (noProcessWithNumber(X, < Pid : BProcess | mode: mode, number: Z > C) == true 
        and (waitingCountPlus(< Pid : BProcess | mode: mode, number: Z > C) > 0)) .
        --- and (critCountPlus(< Did : Dispenser | next: X, last: Y > < Pid : BProcess | mode: wait, number: Z > C) == 0)) .

endm  

--- [[< D 0 : Dispenser | next: 1,last: 1 > 
--- < P 1 : BProcess | mode: sleep,number: 1 > 
--- < P 2 : BProcess | mode: sleep,number: 2 > 
--- < P 3 : BProcess | mode: sleep,number: 3 > 
--- < P 4 : BProcess | mode: sleep,number: 4 > 
--- < P 5 : BProcess | mode: wait,number: 5 >]]

--- [[< D 0 : Dispenser | next: 1,last: 1 > < P 1 : BProcess | mode: sleep,number: 1 > < P 2 : BProcess | mode: sleep,number: 2 > < P 3 : BProcess | mode: sleep,number: 3 > < P 4 : BProcess | mode: sleep,number: 4 > < P 5 : BProcess | mode: wait,number: 5 >]]
--- [[< D 0 : Dispenser | next: 2,last: 1 > < P 1 : BProcess | mode: sleep,number: 1 > < P 2 : BProcess | mode: sleep,number: 2 > < P 3 : BProcess | mode: sleep,number: 3 > < P 4 : BProcess | mode: sleep,number: 4 > < P 5 : BProcess | mode: wait,number: 5 >]]


--- [[< D 0 : Dispenser | next: 6,last: 6 > < P 1 : BProcess | mode: sleep,number: 0 > < P 2 : BProcess | mode: sleep,number: 0 > < P 3 : BProcess | mode: sleep,number: 0 > < P 4 : BProcess | mode: sleep,number: 0 > < P 5 : BProcess | mode: wait,number: 0 >]]


---  ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ _________ ____ 
--- ||A |||b |||s |||t |||r |||a |||c |||c |||i |||ó |||n |||       |||+ ||
--- ||__|||__|||__|||__|||__|||__|||__|||__|||__|||__|||__|||_______|||__||
--- |/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|

mod ABSTRACT-BAKERY+ is 
    including BAKERY+ .

    var  Did                    : DispenserId .
    vars N L PN T               : Nat .
    vars Pid1  Pid2  Pid       : ProcessId .
    var  Proc                   : BProcess . 
    vars mode mode1 mode2 m    : Mode .
    var  C                      : Configuration . 
    vars X Y Z                  : Nat .

    op procesosMenoresOIguales : Nat Configuration -> Nat . 
    eq procesosMenoresOIguales(N, none) = 0 . 
    eq procesosMenoresOIguales(N, < Did : Dispenser | next: PN, last: L > C) = procesosMenoresOIguales(N, C) . 
    eq procesosMenoresOIguales(N, < Pid : BProcess | mode: mode, number: PN > C) = if PN <= N and N > 0 and PN > 0  then s (procesosMenoresOIguales(N,C)) else procesosMenoresOIguales(N,C) fi . 
    
---    op procesosNoNumerados : Configuration -> Bool . 
---    eq procesosNoNumerados (none) = true .
---    eq procesosNoNumerados (< Pid1 : BProcess | mode: mode1, number: PN >) = true . 
---    ceq procesosNoNumerados (< Pid1 : BProcess | mode: mode1, number: PN > < Pid2 : BProcess | mode: mode2, number: T >) = false if PN > T . 
---    ceq procesosNoNumerados (< Pid1 : BProcess | mode: mode1, number: PN > < Pid2 : BProcess | mode: mode2, number: T >) = true  if PN < T . 
---    ceq procesosNoNumerados (< Pid1 : BProcess | mode: mode1, number: PN > < Pid2 : BProcess | mode: mode2, number: T > C) = false and procesosNoNumerados(C) if PN > T . 
---    ceq procesosNoNumerados (< Pid1 : BProcess | mode: mode1, number: PN > < Pid2 : BProcess | mode: mode2, number: T > C) = true and procesosNoNumerados(C) if PN < T . 

    op procesosConTickets : Configuration -> Nat .
    eq procesosConTickets (none) = 0 . 
    eq procesosConTickets (< Did : Dispenser | next: N, last: L > C) = procesosConTickets(C) . 
    eq procesosConTickets (< Pid : BProcess | mode: mode, number: s PN >) = 1 . 
    ceq procesosConTickets (< Pid : BProcess | mode: mode, number: PN > C ) = s (procesosConTickets (C)) if PN > 0 .
    ceq procesosConTickets (< Pid : BProcess | mode: mode, number: PN > C ) = procesosConTickets(C) if PN == 0 . 

 --- Operación auxiliar para decrementar en N los números de orden para los procesos (parámetro "number")
    --- Argumentos:
    ---     Cantidad a decrementar  : Nat
    ---     Lista de Procesos       : Configuration
    op restaAux : Nat Configuration -> Configuration .
    eq restaAux(N, none) = none .
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: PN >) C) =  < Pid : BProcess | mode: m, number: PN > restaAux(N, C)
        if m == sleep .
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: PN >)) =  < Pid : BProcess | mode: m, number: PN > 
        if m == sleep .    
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: PN >)) =  < Pid : BProcess | mode: m, number: sd(PN,N) > 
        if m =/= sleep .
    ceq restaAux(N, (< Pid : BProcess | mode: m, number: PN > C)) =  < Pid : BProcess | mode: m, number: sd(PN,N) > restaAux(N, C) 
        if m =/= sleep .

    --- Operación auxiliar para comprobar que no hay dispensadores en una configuración determinada
    --- Argumentos: 
    ---     Lista de configuraciones    : Configuration 
    op noDispensers : Configuration -> Bool .
    eq noDispensers (< Pid : BProcess | mode: m, number: PN >) = true . 
    eq noDispensers (< Did : Dispenser | next: N, last: L > C) = false .
    eq noDispensers (< Pid : BProcess | mode: m, number: PN > C) = true and noDispensers (C) . 

    --- Abstracción: decrementando en uno los números de orden de todos los procesos (los que no
    --- estén en modo sleep, que tendrán número de orden 0), siempre que el valor de next sea mayor que 1

    op procesosMayoresQueUno : Configuration -> Bool . 
    eq procesosMayoresQueUno (none) = true .
    eq procesosMayoresQueUno (< Did : Dispenser | next: N, last: L > C) = true and procesosMayoresQueUno(C) .
    ceq procesosMayoresQueUno (< Pid : BProcess | mode: m, number: PN > C) = true and procesosMayoresQueUno (C) if PN > 1 . 
    ceq procesosMayoresQueUno (< Pid : BProcess | mode: m, number: PN > C) = false if PN = 1 . 

    ceq [[< Did : Dispenser | next: s N, last: L > < Pid : BProcess | mode: m, number: PN > C]]
        = [[abstract( < Did : Dispenser | next: s N, last: L > < Pid : BProcess | mode: m, number: PN > C)]] 
        if procesosMayoresQueUno(< Pid : BProcess | mode: m, number: PN > C) == true .

    op abstract : Configuration -> Configuration . 
    eq abstract (< Did : Dispenser | next: 1, last: L > C) = (< Did : Dispenser | next: 1, last: s(procesosConTickets(C)) > C) . 
    ceq abstract (< Did : Dispenser | next: 1, last: L > C) = < Did : Dispenser | next: 1, last: L > restaAux(1, C) 
        if procesosMayoresQueUno(C) == true and noDispensers(C) .
    ceq abstract(< Did : Dispenser | next: N, last: L > C)
        = < Did : Dispenser | next: sd(N,1), last: sd(L, 1) > restaAux(1 , C)
        if N > 1 and noDispensers(C) .

endm    

eof

---  ____  ____  _  _   __  
--- (    \(  __)( \/ ) /  \ 
---  ) D ( ) _) / \/ \(  O )
--- (____/(____)\_)(_/ \__/ 

---                ____________________
--- --\__/--\__/--[      BProcess      ]--\__/--\__/--

--- Creación de un proceso con ID 32
---     modo: sleep
---     numero en cola: 1
--- rew < P 32 : BProcess | mode: sleep, number: 1 > . 

---                ____________________
--- --\__/--\__/--[      Dispenser     ]--\__/--\__/--

--- rew < D : Dispenser | next: 1, last: 1 > . 



---                ____________________
--- --\__/--\__/--[       Search      ]--\__/--\__/--
--- search initial(1) =>* [[< D 1 : Dispenser | next: 1, last: 1 > < P 1 : BProcess | mode: crit, number: 1 > ]] .
